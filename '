---
layout: post
title: "AWS RDS deployment types"
---

I was tasked with writing AWS CDK source code for infrastructure of a project.
The specification I had available was one of those infrastructure map pictures with all the frames and icons of AWS services.
Not ideal but in some ways more descriptive then couple sentences.
Among other things it called for postgres RDS database setup with three instances.
A primary instance and two stand-by replicas.

# RDS deployment types

RDS offers three deployment types:
- **Single db instance** is just what it sounds like

TODO - how to recognize one in console - it says multi-az no in databases listing

- **Multi-AZ db instance** is pair of db instnaces deployed in two different availability zones.
  Primary one serves all reads and writes. The other instance is not serving any requests.
  It is kept synced and ready. If malfunction of primary is detected AWS automatically fails over to this second instance.
  When you use `create-db-instance` aws cli rds command with `--multi-az` option, this is what you get.

TODO - how to recognize one in console - it says multi-az yes in databases listing and there is no other nodes showin in the listing. Also there is just single instance in replication

- **Multi-AZ db cluster** consists of primary and two secondary instances. They too serve as failover
  nodes. But they can also serve read traffic. Failover detection and execution should be faster as well.
  To create this using aws api you need to use `create-db-cluster` command instead.

TODO - how to recognize one in console - it says multi-az yes in databases listing and there are two other instances shown in listing itself
TODO - add image


This is what I knew. So far so good.

# AWS CDK

This is my first encounter with AWS CDK. Primarily I try to use constructs classes as
that's seems to be where part of CDK advantage over CloudFormation is.
I went straight for [DatabaseCluster](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseCluster.html)
construct. It's initializer has `engine` parameter of `IClusterEngine` type.
Only way how the library allows me to create value of that type is through
static methods of [DatabaseClusterEngine](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseClusterEngine.html).
However there's only support for Aurora based clusters.

I knew Aurora is a database product by AWS but not much more. CDK api suggested that every multi-az database cluster
automatically means Aurora deployment.

TODO continue

# Research results

multi-az and aurora are not the same thing.

one can have non aurora multi-az db cluster postgres rds deployment
here three postgres instances are deployed where one of them is primary/writer and two are reader/failover nodes
postgres instances communicate directly using postgres native channels to sync and coordintate

# Aurora

One can also have aurora multi-az db cluster with postgres client interface. This is however entirely different beast.
three instances with primary/secondsary setup. However they do not comminicate directly.
instead they all connect to zone spaning storage volume. This is what aurora is about. AWS implemented abstraction of storage volume which is not
restricted for single AZ (as ebs is).
All communication and synchronization db instances are doing is indirect through communication with this storage layer.

# So what's up with dbclustr construct

Aurora and multi-az db clusters are two different concepts. The fact that in current version of aws cdk api one cannot use dbcluster construct to create non aurora cluster is just mistake in construct definitino.

Using db cluster cloudformation class directly it is possible to create what I need
code example
